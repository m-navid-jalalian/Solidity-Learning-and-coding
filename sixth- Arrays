// SPDX-License-Identifier: MIT
pragma solidity ^0.8;
pragma experimental ABIEncoderV2;

contract Arrays {

    // one dimential arrays
    // dynamic arrays
    uint8[] ary1;               // []
    uint8[] ary2= [1,2,3];      // [1,2,3]

    // arrays with constant value
    uint8[3] ary3;              // [0,0,0]
    uint8[3] ary4= [1,2,3];     // [1,2,3]

    // tow dimential arrays
    // dynamic arrays
    uint8[][] ary5;                  // [][]
    // arrays with constant value
    uint8[2][3] ary6;                            // [ [0,0],[0,0],[0,0] ]
    uint8[2][4] ary7= [ [1,2],[3,4],[5,6],[7,2] ];     // [ [1,2],[3,4],[5,6],[7,2] ]

/*  Arrays function and properties:

    ary.length;
    ary[i];
    ary[i][j]= x;

    ary.push(x);    // [1,2,3] ---> [1,2,3,x]
    ary.pop();      // [1,2,3,x] ---> [1,2,3]
    * puch and pop funtions use just for dtnamic arrays (they change arrays size)

    delete ary[i];  //make the defualt value of i's array                        */

    //............... lentgh ...............//
    function getArraysLength() public view returns(uint[4] memory len){
        len[0]= ary1.length;
        len[1]= ary2.length;
        len[2]= ary5.length;
        len[3]= ary7.length;
    return len;
    }

    //............... get function ...............//
    function getArray7() public view returns(uint8[2][4] memory){
        return ary7;
    }

    //............... get element function ...............//
    function getAry2Element(uint i) public view returns(uint8){
        return ary2[i];
    }
    function getAry7Element(uint i) public view returns(uint8[2] memory){
        return ary7[i];
    }
}
