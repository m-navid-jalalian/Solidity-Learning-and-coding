// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

contract GlobalVariables {

    //Information about the last mined block in the network
    function getBlockInfo () public view returns (uint,uint,uint,address,uint,bytes32){

        return (
            block.number,               //number of last block that is mine 
            block.timestamp,            //time of last block that is mine
            block.difficulty,           //difficulty of mining of last block
            block.coinbase,             //address of block's miner
            block.chainid,              // Id of chain that block mined in there
            blockhash(block.number)     // hash of block
        );
    }

    //meaure the gas that remain from the "gas limit"
    //(we set gas limit according to netowrk and speed of transaction we need)
    function getGasInfo() public view returns(uint, uint, uint){
        
        uint remaindeGas = gasleft(); //gasleft ~ remained gas = gas limit - gas used
        uint gaslimit= block.gaslimit; // limitaion of gas that we can use in the curent block
        uint basefee= block.basefee; //base fee of each gas 

        return (remaindeGas,gaslimit,basefee);
    }

    function getMsgInfo() public view returns () {
        
        address caller=                 msg.sender // address of who call the smart contract
        uint sentValue=                 msg.value  // price value that caller pay to smart cantract
        bytes calldata functionData=    msg.data   // data of funtion
        
    }
    
}
